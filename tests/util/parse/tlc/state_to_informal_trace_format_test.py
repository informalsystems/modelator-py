import os

from modelator.util.parse.tla import parser, to_str
from modelator.util.parse.tlc.state_to_informal_trace_format import (
    state_to_informal_trace_format_state,
)

from ....helper import get_resource_dir

##
from modelator.util.parse.tla import visit, parser
from modelator.util.parse.tla.to_str import Nodes
from modelator.util.parse.tlc.state_to_informal_trace_format import Visitor
from modelator.util.parse.informal_trace_format import (
    ITFMap,
    ITFSet,
    ITFState,
)

##


def test_create_ast_from_tlc_state_expressions():
    """
    Test the tla_python library capabilities to parse TLA+ snippets
    included in counterexamples generated by TLC.
    """

    fns = [
        "TlcStateExpressionExample0.txt",
        "TlcStateExpressionExample1.txt",
        "TlcStateExpressionExample2.txt",
        "TlcStateExpressionExample3.txt",
        "TlcStateExpressionExample4.txt",
        "TlcStateExpressionExample5.txt",
        "TlcStateExpressionExample6.txt",
        "TlcStateExpressionExample7.txt",
    ]

    expressions = []

    for fn in fns:
        path = os.path.join(get_resource_dir(), fn)
        with open(path, "r") as fd:
            content = fd.read()
            expressions.append(content)

    for expr in expressions:
        tree = parser.parse_expr(expr, nodes=to_str.Nodes)
        assert tree is not None


def test_tla_state_expression_to_informal_trace_format_state():

    """
    json in the Informal Trace Format contains a state field mapping to a
    list of states.

    https://apalache.informal.systems/docs/adr/015adr-trace.html?highlight=trace%20format#the-itf-format

    Test the translation of a single state.
    """

    # poetry run pytest tests/util/parse/tlc/state_to_informal_trace_format_test.py -s -k 'test_tla_state_expression_to_informal_trace_format_state'

    fns = [
        "TlcStateExpressionExample0.txt",
        "TlcStateExpressionExample1.txt",
        "TlcStateExpressionExample2.txt",
        "TlcStateExpressionExample3.txt",
        "TlcStateExpressionExample4.txt",
        "TlcStateExpressionExample5.txt",
        "TlcStateExpressionExample6.txt",
        "TlcStateExpressionExample7.txt",
        "TlcStateExpressionExample8.txt",
    ]

    expressions = []

    for fn in fns:
        path = os.path.join(get_resource_dir(), fn)
        with open(path, "r") as fd:
            content = fd.read()
            expressions.append(content)

    for s in expressions:
        res = state_to_informal_trace_format_state(s)
        assert res is not None


def test_debug():
    s = """/\ sequence_indexed_map = (<<"one", "two">> :> 42)
/\ one_indexed_sequential_map = <<42, 42, 42, 42, 42>>
/\ string_indexed_map = [two |-> 42, one |-> 42]
/\ negative_number = -123456
/\ record = [foo |-> 42, bar |-> 43]
/\ tuple = <<1, 2>>
/\ bool = FALSE
/\ map_indexed_map = ([foo |-> 42, bar |-> 42] :> 42)
/\ set_indexed_map = ({1, 2, 3} :> 42 @@ {4, 5, 6} :> 42)
/\ set = {1, 2, 3}
/\ list = <<1, "two">>
/\ map = ( 0 :> 42 @@
  1 :> 42 @@
  2 :> 42 @@
  3 :> 42 @@
  4 :> 42 @@
  5 :> 42 @@
  6 :> "forty-two" @@
  8 :> "forty-two" @@
  13 :> "forty-two" )
/\ json_int = 123
/\ string_literal = "hello"
/\ zero_indexed_sequential_map = (0 :> 42 @@ 1 :> 42 @@ 2 :> 42 @@ 3 :> 42 @@ 4 :> 42 @@ 5 :> 42)
/\ other_bool = TRUE"""
    tree = parser.parse_expr(s, nodes=Nodes)
    txt = tree.to_str(width=80)
    print(txt)
    visitor = Visitor()
    var_value_pairs = visitor.visit(tree)
    var_value_map = {key: value for key, value in var_value_pairs}
    return ITFState(var_value_map)
