import os
import json

from modelator.util.parse.tla import parser, to_str
from modelator.util.parse.tlc.stdout_to_informal_trace_format import (
    extract_traces,
    tlc_trace_to_informal_trace_format_trace,
)

from ....helper import get_resource_dir


def test_extract_trace_from_tlc():
    fn = "TlcTraceParse.txt"
    fn = os.path.join(get_resource_dir(), fn)
    content = None
    with open(fn, "r") as fd:
        content = fd.read()

    tlc_tla_traces = extract_traces(content)
    assert len(tlc_tla_traces) == 1


def test_extract_multiple_traces_from_tlc():

    fn = "TlcMultipleTraceParse.txt"
    fn = os.path.join(get_resource_dir(), fn)
    content = None
    with open(fn, "r") as fd:
        content = fd.read()

    result = extract_traces(content)
    assert len(result) == 4


def test_extract_multiple_traces_from_tlc_cuttoff():

    # Some number of lines from stdout have been removed.
    fns = [
        "TlcMultipleTraceParseCutoff0.txt",
        "TlcMultipleTraceParseCutoff1.txt",
    ]

    contents = []

    for fn in fns:
        path = os.path.join(get_resource_dir(), fn)
        with open(path, "r") as fd:
            content = fd.read()
            contents.append(content)

    results = [extract_traces(content) for content in contents]
    assert all(len(result) == 3 for result in results)


def test_create_ast_from_tlc_state_expressions():
    """
    Test the tla_python library capabilities to parse TLA+ snippets
    included in counterexamples generated by TLC.
    """

    fns = [
        "TlcStateExpressionExample0.txt",
        "TlcStateExpressionExample1.txt",
        "TlcStateExpressionExample2.txt",
        "TlcStateExpressionExample3.txt",
        "TlcStateExpressionExample4.txt",
        "TlcStateExpressionExample5.txt",
        "TlcStateExpressionExample6.txt",
        "TlcStateExpressionExample7.txt",
    ]

    expressions = []

    for fn in fns:
        path = os.path.join(get_resource_dir(), fn)
        with open(path, "r") as fd:
            content = fd.read()
            expressions.append(content)

    for expr in expressions:
        tree = parser.parse_expr(expr, nodes=to_str.Nodes)
        assert tree is not None


def test_extract_informal_trace_format_trace_from_tlc_stress_example():
    fn = "TlcTraceParse.txt"
    fn = os.path.join(get_resource_dir(), fn)
    content = None
    with open(fn, "r") as fd:
        content = fd.read()

    tlc_tla_traces = extract_traces(content)
    assert len(tlc_tla_traces) == 1
    tlc_tla_trace = tlc_tla_traces[0]
    itf_trace = tlc_trace_to_informal_trace_format_trace(tlc_tla_trace)
    obj = itf_trace.to_obj()
    s = json.dumps(obj, indent=4)

    fn = os.path.join(get_resource_dir(), "TlcTraceParse.json")


def test_extract_informal_trace_format_traces_from_tlc_simple_example():

    fn = "TlcMultipleTraceParse.txt"
    fn = os.path.join(get_resource_dir(), fn)
    content = None
    with open(fn, "r") as fd:
        content = fd.read()

    tlc_traces = extract_traces(content)
    itf_traces = [
        tlc_trace_to_informal_trace_format_trace(trace) for trace in tlc_traces
    ]


def test_extract_informal_trace_format_traces_from_tlc_real_world_example():

    fn = "TlcMultipleTraceParse_RealWorld0.txt"
    fn = os.path.join(get_resource_dir(), fn)
    content = None
    with open(fn, "r") as fd:
        content = fd.read()

    tlc_tla_traces = extract_traces(content)
    itf_traces = [
        tlc_trace_to_informal_trace_format_trace(trace) for trace in tlc_tla_traces
    ]

    trace_objects = [trace.to_obj() for trace in itf_traces]
    fn = os.path.join(get_resource_dir(), "TlcMultipleTraceParse_RealWorld0.json")
    with open(fn, "w") as fd:
        content = json.dumps(trace_objects, indent=4)
        fd.write(content)
