import os

from modelator.util.parse.tla import parser, to_str
from modelator.util.parse.tlc.stdout_to_informal_trace_format import extract_traces

from ....helper import get_resource_dir


def test_create_ast_from_tlc_state_expressions():
    """
    Test the tla_python library capabilities to parse TLA+ snippets
    included in counterexamples generated by TLC.
    """

    fns = [
        "TlcStateExpressionExample0.txt",
        "TlcStateExpressionExample1.txt",
        "TlcStateExpressionExample2.txt",
        "TlcStateExpressionExample3.txt",
        "TlcStateExpressionExample4.txt",
        "TlcStateExpressionExample5.txt",
        "TlcStateExpressionExample6.txt",
    ]

    expressions = []

    for fn in fns:
        path = os.path.join(get_resource_dir(), fn)
        with open(path, "r") as fd:
            content = fd.read()
            expressions.append(content)

    for expr in expressions:
        tree = parser.parse_expr(expr, nodes=to_str.Nodes)
        assert tree is not None


def test_extract_multiple_traces_from_tlc():

    fn = "TlcMultipleTraceParse.txt"
    fn = os.path.join(get_resource_dir(), fn)
    content = None
    with open(fn, "r") as fd:
        content = fd.read()

    result = extract_traces(content)
    assert len(result) == 4


def test_python_knowledge():
    class A:
        def bar(self):
            return self.foo()

        def foo(self):
            return "a"

    class B(A):
        def foo(self):
            return "b"

    b = B()
    assert isinstance(b, B)
    assert isinstance(b, A)
    assert b.foo() == "b"
    assert b.bar() == "b"
